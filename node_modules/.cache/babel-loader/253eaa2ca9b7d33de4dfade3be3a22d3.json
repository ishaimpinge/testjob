{"ast":null,"code":"var _jsxFileName = \"/home/rohitv/my-app/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport Moment from 'moment';\nimport Moments from 'react-moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App(props) {\n  _s();\n\n  const [lat, setlatitude] = useState(null);\n  const [long, setlongitude] = useState(null);\n  const [city, setcity] = useState('');\n  const [Locationname, setLocationname] = useState('');\n  const [sunset, setsunset] = useState('');\n  const [sunrise, setsunrise] = useState('');\n  const [userdata, setUserdata] = useState([]);\n  const [error, setError] = useState(null);\n  const timessstamp = Moment().subtract(5, 'd').unix();\n  console.log(props, 'gggiii');\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    fetch('http://api.openweathermap.org/data/2.5/forecast?q=' + city + '&mode=json&units=imperial&appid=73748f7d2e1692455877e78259d5e3d5').then(async response => {\n      var _response$headers$get;\n\n      const isJson = (_response$headers$get = response.headers.get('content-type')) === null || _response$headers$get === void 0 ? void 0 : _response$headers$get.includes('application/json');\n      const data = isJson && (await response.json()); // check for error response\n\n      if (!response.ok) {\n        // get error message from body or default to response status\n        const error = data && data.message || response.status;\n        return Promise.reject(error);\n      }\n\n      console.log(data);\n      setUserdata(data.list);\n      setLocationname(data.city.name);\n      setsunset(data.city.sunset);\n      setsunrise(data.city.sunrise);\n    }).catch(error => {\n      setError(error.toString());\n      setTimeout(() => {\n        setError(null);\n      }, 3000);\n      console.error('There was an error!', error);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      style: {\n        color: 'white',\n        background: 'red',\n        padding: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"material-icons error-icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 15\n      }, this), error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"step1submit\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"city\",\n        type: \"text\",\n        value: city,\n        onChange: e => setcity(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        className: \"btn btn-blue\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\" \", ` Location Name : ${Locationname}`]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: /*#__PURE__*/_jsxDEV(Moments, {\n        format: \"hh:mm:ss\",\n        children: sunset\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\" \", ` Sunrise : ${sunrise}`]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), userdata && userdata.map((note, index) => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"contdata\",\n          style: {\n            'border': '1px solid #ccc'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [\" \", ` Date : ${note.dt_txt}`]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 11\n          }, this), `Wheather : ${note.weather[0].description}`, \",\", `humidity : ${note.main.humidity}`, /*#__PURE__*/_jsxDEV(\"h4\", {\n            style: {\n              'color': 'red'\n            },\n            children: note.weather[0].main === 'Rain' ? 'Best day to sell an umbrella' : 'Best day to sell a jacket'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)\n      }, void 0, false);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"AtaWMIfwISCrnVpPxZyvk4V+N0g=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/rohitv/my-app/src/App.tsx"],"names":["React","useState","Moment","Moments","App","props","lat","setlatitude","long","setlongitude","city","setcity","Locationname","setLocationname","sunset","setsunset","sunrise","setsunrise","userdata","setUserdata","error","setError","timessstamp","subtract","unix","console","log","handleSubmit","event","preventDefault","fetch","then","response","isJson","headers","get","includes","data","json","ok","message","status","Promise","reject","list","name","catch","toString","setTimeout","color","background","padding","e","target","value","map","note","index","dt_txt","weather","description","main","humidity"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport Moment from 'moment';\nimport Moments from 'react-moment';\nfunction App(props:any) {\nconst [lat, setlatitude] = useState(null);\nconst [long, setlongitude] = useState(null);\nconst [city,\n  setcity] = useState('');\n  const [Locationname,\n    setLocationname] = useState('');\n    const [sunset,\n      setsunset] = useState('');\n      const [sunrise,\n        setsunrise] = useState('');\n  const [userdata,\n    setUserdata] = useState([]);\nconst [error,\n  setError] = useState(null)\nconst timessstamp = Moment().subtract(5,'d').unix();\nconsole.log(props, 'gggiii'); \nconst handleSubmit = (event:any) => {\n  \n  event.preventDefault();\n  fetch('http://api.openweathermap.org/data/2.5/forecast?q='+city+'&mode=json&units=imperial&appid=73748f7d2e1692455877e78259d5e3d5').then(async response => {\n            const isJson = response\n                .headers\n                .get('content-type')\n                ?.includes('application/json');\n            const data = isJson && await response.json();\n\n            // check for error response\n            if (!response.ok) {\n                // get error message from body or default to response status\n                const error = (data && data.message) || response.status;\n                return Promise.reject(error);\n            }\n            console.log(data);\n            setUserdata(data.list);\n            setLocationname(data.city.name);\n            setsunset(data.city.sunset);\n            setsunrise(data.city.sunrise);\n        }).catch(error => {\n            setError(error.toString());\n            setTimeout(() => {\n              setError(null);\n          }, 3000);\n            console.error('There was an error!', error);\n        });\n};\n\n  return (\n \n    <div className=\"App\">\n         {error\n      ? <div\n              className=\"error\"\n              style={{\n              color: 'white',\n              background: 'red',\n              padding: '10px'\n          }}>\n              <i className=\"material-icons error-icon\"></i>\n              {error}\n          </div>\n      : null}\n\n      <form className=\"step1submit\" onSubmit={handleSubmit}>\n\n                        <input\n                            name=\"city\"\n                            type=\"text\"\n                            value={city}\n                            onChange={e => setcity(e.target.value)}\n                            required/>\n         <button onClick={handleSubmit} className=\"btn btn-blue\">Send</button>\n      </form>\n      <h1> {` Location Name : ${Locationname}`}</h1>\n      <h1><Moments format=\"hh:mm:ss\">{sunset}</Moments></h1>\n      <h1> {` Sunrise : ${sunrise}`}</h1>\n       {userdata && userdata.map((note : any, index) => {\n  \n        return(\n          <>\n          <div className = \"contdata\" style={{'border': '1px solid #ccc'}}>\n          <h4> {` Date : ${note.dt_txt}`}</h4>\n          {`Wheather : ${note.weather[0].description}`},\n          {`humidity : ${note.main.humidity}`}\n          <h4 style={{'color': 'red'}}>{note.weather[0].main === 'Rain' ? 'Best day to sell an umbrella' : 'Best day to sell a jacket'}</h4></div>\n          </>\n          )\n        })}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}