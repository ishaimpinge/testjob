{"ast":null,"code":"var _jsxFileName = \"/home/rohitv/my-app/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport Moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App(props) {\n  _s();\n\n  const [lat, setlatitude] = useState(null);\n  const [long, setlongitude] = useState(null);\n  const [city, setcity] = useState('');\n  const [Locationname, setLocationname] = useState('');\n  const [userdata, setUserdata] = useState([]);\n  const [error, setError] = useState(null);\n  const timessstamp = Moment().subtract(5, 'd').unix();\n  console.log(props, 'gggiii');\n\n  const handleSubmit = event => {// event.preventDefault();\n    // fetch('http://api.openweathermap.org/data/2.5/forecast?q=' + city + '&mode=json&units=imperial&appid=73748f7d2e1692455877e78259d5e3d5').then(async response => {\n    //     const isJson = response\n    //         .headers\n    //         .get('content-type')\n    //         ?.includes('application/json');\n    //     const data = isJson && await response.json();\n    //     // check for error response\n    //     if (!response.ok) {\n    //         // get error message from body or default to response status\n    //         const error = (data && data.message) || response.status;\n    //         return Promise.reject(error);\n    //     }\n    //     console.log(data);\n    //     setUserdata(data.list);\n    //     setLocationname(data.city.name);\n    // }).catch(error => {\n    //     setError(error.toString());\n    //     setTimeout(() => {\n    //         setError(null);\n    //     }, 3000);\n    //     console.error('There was an error!', error);\n    // });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      style: {\n        color: 'white',\n        background: 'red',\n        padding: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"material-icons error-icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 25\n      }, this), error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 19\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"step1submit\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"city\",\n        type: \"text\",\n        value: city,\n        onChange: e => setcity(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        className: \"btn btn-blue\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: ` Location Name : ${Locationname}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), userdata && userdata.map((note, index) => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"contdata\",\n          style: {\n            'border': '1px solid #ccc',\n            'float': 'left',\n            'width': '23%'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: ` Date : ${note.dt_txt}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 21\n          }, this), `Wheather : ${note.weather[0].description}`, \", \", `humidity : ${note.main.humidity}`, /*#__PURE__*/_jsxDEV(\"h4\", {\n            style: {\n              'color': 'red'\n            },\n            children: note.weather[0].main === 'Rain' ? 'Best day to sell an umbrella' : 'Best day to sell a jacket'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 29\n        }, this), \" \"]\n      }, void 0, true);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"GBsWWC0uCGMT7Rfmie/BljbFjVw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/rohitv/my-app/src/App.tsx"],"names":["React","useState","Moment","App","props","lat","setlatitude","long","setlongitude","city","setcity","Locationname","setLocationname","userdata","setUserdata","error","setError","timessstamp","subtract","unix","console","log","handleSubmit","event","color","background","padding","e","target","value","map","note","index","dt_txt","weather","description","main","humidity"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport Moment from 'moment';\nimport Moments from 'react-moment';\nfunction App(props : any) {\n    const [lat,\n        setlatitude] = useState(null);\n    const [long,\n        setlongitude] = useState(null);\n    const [city,\n        setcity] = useState('');\n    const [Locationname,\n        setLocationname] = useState('');\n    const [userdata,\n        setUserdata] = useState([]);\n    const [error,\n        setError] = useState(null)\n    const timessstamp = Moment()\n        .subtract(5, 'd')\n        .unix();\n    console.log(props, 'gggiii');\n    const handleSubmit = (event : any) => {\n\n        // event.preventDefault();\n        // fetch('http://api.openweathermap.org/data/2.5/forecast?q=' + city + '&mode=json&units=imperial&appid=73748f7d2e1692455877e78259d5e3d5').then(async response => {\n        //     const isJson = response\n        //         .headers\n        //         .get('content-type')\n        //         ?.includes('application/json');\n        //     const data = isJson && await response.json();\n\n        //     // check for error response\n        //     if (!response.ok) {\n        //         // get error message from body or default to response status\n        //         const error = (data && data.message) || response.status;\n        //         return Promise.reject(error);\n        //     }\n        //     console.log(data);\n        //     setUserdata(data.list);\n        //     setLocationname(data.city.name);\n        // }).catch(error => {\n        //     setError(error.toString());\n        //     setTimeout(() => {\n        //         setError(null);\n        //     }, 3000);\n        //     console.error('There was an error!', error);\n        // });\n    };\n\n    return (\n\n        <div className=\"App\">\n            {error\n                ? <div\n                        className=\"error\"\n                        style={{\n                        color: 'white',\n                        background: 'red',\n                        padding: '10px'\n                    }}>\n                        <i className=\"material-icons error-icon\"></i>\n                        {error}\n                    </div>\n                : null}\n\n            <form className=\"step1submit\" onSubmit={handleSubmit}>\n\n                <input\n                    name=\"city\"\n                    type=\"text\"\n                    value={city}\n                    onChange={e => setcity(e.target.value)}\n                    required/>\n                <button onClick={handleSubmit} className=\"btn btn-blue\">Send</button>\n            </form>\n            <h1>\n                {` Location Name : ${Locationname}`}</h1>\n            {userdata && userdata.map((note : any, index) => {\n\n                return ( <> <div\n                    className=\"contdata\"\n                    style={{\n                    'border': '1px solid #ccc',\n                    'float': 'left',\n                    'width': '23%'\n                }}>\n                    <h4>\n                        {` Date : ${note.dt_txt}`}</h4>\n                    {`Wheather : ${note.weather[0].description}`}, {`humidity : ${note.main.humidity}`}\n                    <h4 style={{\n                        'color': 'red'\n                    }}>{note.weather[0].main === 'Rain'\n                            ? 'Best day to sell an umbrella'\n                            : 'Best day to sell a jacket'}</h4>\n                </div> </>\n          )\n        })}\n        </div>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}