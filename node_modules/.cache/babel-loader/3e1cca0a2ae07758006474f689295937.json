{"ast":null,"code":"var _jsxFileName = \"/home/rohitv/my-app/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport Moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [lat, setlatitude] = useState(null);\n  const [long, setlongitude] = useState(null);\n  const [city, setcity] = useState('');\n  const [userdata, setUserdata] = useState([]);\n  const [error, setError] = useState(null);\n  const timessstamp = Moment().subtract(5, 'd').unix();\n  console.log(timessstamp, 'gggiii'); // const handleSubmit = (key:any) => {\n\n  fetch('http://api.openweathermap.org/data/2.5/forecast?q=' + city + '&mode=json&units=imperial&appid=73748f7d2e1692455877e78259d5e3d5').then(async response => {\n    var _response$headers$get;\n\n    const isJson = (_response$headers$get = response.headers.get('content-type')) === null || _response$headers$get === void 0 ? void 0 : _response$headers$get.includes('application/json');\n    const data = isJson && (await response.json()); // check for error response\n\n    if (!response.ok) {\n      // get error message from body or default to response status\n      const error = data && data.message || response.status;\n      return Promise.reject(error);\n    }\n\n    console.log(data);\n    setUserdata(data.list);\n  }).catch(error => {\n    setError(error.toString());\n    console.error('There was an error!', error);\n  }); // };\n  //   if(lat !== null && long !==null) {\n  //     fetch('http://api.openweathermap.org/data/2.5/onecall/timemachine?lat='+lat+'&lon='+long+'&dt='+timessstamp+'&appid=73748f7d2e1692455877e78259d5e3d5').then(async response => {\n  //       const isJson = response\n  //           .headers\n  //           .get('content-type')\n  //           ?.includes('application/json');\n  //       const data = isJson && await response.json();\n  //       // check for error response\n  //       if (!response.ok) {\n  //           // get error message from body or default to response status\n  //           const error = (data && data.message) || response.status;\n  //           return Promise.reject(error);\n  //       }\n  //       console.log(data);\n  //       // setUserdata(data);\n  //   }).catch(error => {\n  //       setError(error.toString());\n  //       console.error('There was an error!', error);\n  //   });\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"step1submit\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"city\",\n        type: \"text\",\n        value: city,\n        onChange: e => setcity(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        className: \"btn btn-blue\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), userdata && userdata.map((note, index) => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\" \", ` Date : ${note.dt_txt}`]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), `Wheather : ${note.weather[0].description}`, \",\", `humidity : ${note.main.humidity}`]\n      }, void 0, true);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"jc3MDekMeb3grOR5ydZH/xU6khQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/rohitv/my-app/src/App.tsx"],"names":["React","useState","Moment","App","lat","setlatitude","long","setlongitude","city","setcity","userdata","setUserdata","error","setError","timessstamp","subtract","unix","console","log","fetch","then","response","isJson","headers","get","includes","data","json","ok","message","status","Promise","reject","list","catch","toString","handleSubmit","e","target","value","map","note","index","dt_txt","weather","description","main","humidity"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport Moment from 'moment';\nfunction App() {\nconst [lat, setlatitude] = useState(null);\nconst [long, setlongitude] = useState(null);\nconst [city,\n  setcity] = useState('');\n  const [userdata,\n    setUserdata] = useState([]);\nconst [error,\n  setError] = useState(null)\nconst timessstamp = Moment().subtract(5,'d').unix();\nconsole.log(timessstamp, 'gggiii'); \n// const handleSubmit = (key:any) => {\n  fetch('http://api.openweathermap.org/data/2.5/forecast?q='+city+'&mode=json&units=imperial&appid=73748f7d2e1692455877e78259d5e3d5').then(async response => {\n            const isJson = response\n                .headers\n                .get('content-type')\n                ?.includes('application/json');\n            const data = isJson && await response.json();\n\n            // check for error response\n            if (!response.ok) {\n                // get error message from body or default to response status\n                const error = (data && data.message) || response.status;\n                return Promise.reject(error);\n            }\n            console.log(data);\n            setUserdata(data.list);\n        }).catch(error => {\n            setError(error.toString());\n            console.error('There was an error!', error);\n        });\n// };\n    //   if(lat !== null && long !==null) {\n    //     fetch('http://api.openweathermap.org/data/2.5/onecall/timemachine?lat='+lat+'&lon='+long+'&dt='+timessstamp+'&appid=73748f7d2e1692455877e78259d5e3d5').then(async response => {\n    //       const isJson = response\n    //           .headers\n    //           .get('content-type')\n    //           ?.includes('application/json');\n    //       const data = isJson && await response.json();\n\n    //       // check for error response\n    //       if (!response.ok) {\n    //           // get error message from body or default to response status\n    //           const error = (data && data.message) || response.status;\n    //           return Promise.reject(error);\n    //       }\n    //       console.log(data);\n    //       // setUserdata(data);\n    //   }).catch(error => {\n    //       setError(error.toString());\n    //       console.error('There was an error!', error);\n    //   });\n    // }\n \n\n\n  return (\n    <div className=\"App\">\n      <form className=\"step1submit\" onSubmit={handleSubmit}>\n\n                        <input\n                            name=\"city\"\n                            type=\"text\"\n                            value={city}\n                            onChange={e => setcity(e.target.value)}\n                            required/>\n         <button onClick={handleSubmit} className=\"btn btn-blue\">Send</button>\n      </form>\n       {userdata && userdata.map((note : any, index) => {\n  \n        return(\n          <>\n\n          <h1> {` Date : ${note.dt_txt}`}</h1>\n          {`Wheather : ${note.weather[0].description}`},\n          {`humidity : ${note.main.humidity}`}\n          </>\n          )\n        })}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}