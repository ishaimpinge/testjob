{"ast":null,"code":"var _jsxFileName = \"/home/rohitv/my-app/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [lat, setlatitude] = useState(null);\n  const [long, setlongitude] = useState(null);\n  const [wheatherdata, setwheatherdata] = useState();\n  const [error, setError] = useState(null);\n  const timessstamp = Moment().unix(); // console.log(timessstamp); return;\n\n  useEffect(() => {\n    fetch('http://api.openweathermap.org/geo/1.0/direct?q=London&limit=5&appid=2a6ed6669671100313d8ccd388e8784e').then(async response => {\n      var _response$headers$get;\n\n      const isJson = (_response$headers$get = response.headers.get('content-type')) === null || _response$headers$get === void 0 ? void 0 : _response$headers$get.includes('application/json');\n      const data = isJson && (await response.json()); // check for error response\n\n      if (!response.ok) {\n        // get error message from body or default to response status\n        const error = data && data.message || response.status;\n        return Promise.reject(error);\n      } // console.log(timessstamp);\n\n\n      setlatitude(data[0].lat);\n      setlongitude(data[0].lon);\n    }).catch(error => {\n      setError(error.toString());\n      console.error('There was an error!', error);\n    });\n  }, []);\n\n  if (lat !== null && long !== null) {\n    fetch('http://api.openweathermap.org/data/2.5/onecall/timemachine?lat=' + lat + '&lon=' + long + '&dt=' + timessstamp + '&appid=2a6ed6669671100313d8ccd388e8784e').then(async response => {\n      var _response$headers$get2;\n\n      const isJson = (_response$headers$get2 = response.headers.get('content-type')) === null || _response$headers$get2 === void 0 ? void 0 : _response$headers$get2.includes('application/json');\n      const data = isJson && (await response.json()); // check for error response\n\n      if (!response.ok) {\n        // get error message from body or default to response status\n        const error = data && data.message || response.status;\n        return Promise.reject(error);\n      }\n\n      setwheatherdata(data.current);\n    }).catch(error => {\n      setError(error.toString());\n      console.error('There was an error!', error);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: wheatherdata\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"I9ul3we+Wor9v67dL5yMM5h/MtM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/rohitv/my-app/src/App.tsx"],"names":["React","useEffect","useState","Moment","App","lat","setlatitude","long","setlongitude","wheatherdata","setwheatherdata","error","setError","timessstamp","unix","fetch","then","response","isJson","headers","get","includes","data","json","ok","message","status","Promise","reject","lon","catch","toString","console","current"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport Moment from 'moment';\nfunction App() {\nconst [lat, setlatitude] = useState(null);\nconst [long, setlongitude] = useState(null);\nconst [wheatherdata, setwheatherdata] = useState();\nconst [error,\n  setError] = useState(null)\nconst timessstamp = Moment().unix();\n// console.log(timessstamp); return;\n  useEffect(() => {\n  fetch('http://api.openweathermap.org/geo/1.0/direct?q=London&limit=5&appid=2a6ed6669671100313d8ccd388e8784e').then(async response => {\n            const isJson = response\n                .headers\n                .get('content-type')\n                ?.includes('application/json');\n            const data = isJson && await response.json();\n\n            // check for error response\n            if (!response.ok) {\n                // get error message from body or default to response status\n                const error = (data && data.message) || response.status;\n                return Promise.reject(error);\n            }\n            // console.log(timessstamp);\n            setlatitude(data[0].lat);\n            setlongitude(data[0].lon);\n        }).catch(error => {\n            setError(error.toString());\n            console.error('There was an error!', error);\n        });\n}, [])\n      if(lat !== null && long !==null) {\n        fetch('http://api.openweathermap.org/data/2.5/onecall/timemachine?lat='+lat+'&lon='+long+'&dt='+timessstamp+'&appid=2a6ed6669671100313d8ccd388e8784e').then(async response => {\n          const isJson = response\n              .headers\n              .get('content-type')\n              ?.includes('application/json');\n          const data = isJson && await response.json();\n\n          // check for error response\n          if (!response.ok) {\n              // get error message from body or default to response status\n              const error = (data && data.message) || response.status;\n              return Promise.reject(error);\n          }\n          setwheatherdata(data.current);\n      }).catch(error => {\n          setError(error.toString());\n          console.error('There was an error!', error);\n      });\n    }\n \n\n\n  return (\n    <div className=\"App\">\n      {wheatherdata}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}