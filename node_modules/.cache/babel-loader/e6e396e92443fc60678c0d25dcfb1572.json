{"ast":null,"code":"var _jsxFileName = \"/home/rohitv/my-app/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [lat, setlatitude] = useState(null);\n  const [long, setlongitude] = useState(null);\n  const [userdata, setUserdata] = useState([]);\n  const [error, setError] = useState(null);\n  const timessstamp = Moment().subtract(5, 'd').unix();\n  console.log(timessstamp, 'gggiii');\n  useEffect(() => {\n    fetch('http://api.openweathermap.org/data/2.5/forecast?q=London&mode=json&units=imperial&appid=73748f7d2e1692455877e78259d5e3d5').then(async response => {\n      var _response$headers$get;\n\n      const isJson = (_response$headers$get = response.headers.get('content-type')) === null || _response$headers$get === void 0 ? void 0 : _response$headers$get.includes('application/json');\n      const data = isJson && (await response.json()); // check for error response\n\n      if (!response.ok) {\n        // get error message from body or default to response status\n        const error = data && data.message || response.status;\n        return Promise.reject(error);\n      }\n\n      console.log(data);\n      setUserdata(data.list);\n    }).catch(error => {\n      setError(error.toString());\n      console.error('There was an error!', error);\n    });\n  }, []); //   if(lat !== null && long !==null) {\n  //     fetch('http://api.openweathermap.org/data/2.5/onecall/timemachine?lat='+lat+'&lon='+long+'&dt='+timessstamp+'&appid=73748f7d2e1692455877e78259d5e3d5').then(async response => {\n  //       const isJson = response\n  //           .headers\n  //           .get('content-type')\n  //           ?.includes('application/json');\n  //       const data = isJson && await response.json();\n  //       // check for error response\n  //       if (!response.ok) {\n  //           // get error message from body or default to response status\n  //           const error = (data && data.message) || response.status;\n  //           return Promise.reject(error);\n  //       }\n  //       console.log(data);\n  //       // setUserdata(data);\n  //   }).catch(error => {\n  //       setError(error.toString());\n  //       console.error('There was an error!', error);\n  //   });\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: userdata && userdata.map((note, index) => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\" \", ` Date : ${note.dt_txt}`]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)\n      }, void 0, false);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"sqPCC74UsUZG4SXHVDYAOwGYKr4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/rohitv/my-app/src/App.tsx"],"names":["React","useEffect","useState","Moment","App","lat","setlatitude","long","setlongitude","userdata","setUserdata","error","setError","timessstamp","subtract","unix","console","log","fetch","then","response","isJson","headers","get","includes","data","json","ok","message","status","Promise","reject","list","catch","toString","map","note","index","dt_txt"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAO,WAAP;AACA,OAAOC,MAAP,MAAmB,QAAnB;;;;AACA,SAASC,GAAT,GAAe;AAAA;;AACf,QAAM,CAACC,GAAD,EAAMC,WAAN,IAAqBJ,QAAQ,CAAC,IAAD,CAAnC;AACA,QAAM,CAACK,IAAD,EAAOC,YAAP,IAAuBN,QAAQ,CAAC,IAAD,CAArC;AACA,QAAM,CAACO,QAAD,EACJC,WADI,IACWR,QAAQ,CAAC,EAAD,CADzB;AAEA,QAAM,CAACS,KAAD,EACJC,QADI,IACQV,QAAQ,CAAC,IAAD,CADtB;AAEA,QAAMW,WAAW,GAAGV,MAAM,GAAGW,QAAT,CAAkB,CAAlB,EAAoB,GAApB,EAAyBC,IAAzB,EAApB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,WAAZ,EAAyB,QAAzB;AACEZ,EAAAA,SAAS,CAAC,MAAM;AAChBiB,IAAAA,KAAK,CAAC,0HAAD,CAAL,CAAkIC,IAAlI,CAAuI,MAAMC,QAAN,IAAkB;AAAA;;AAC/I,YAAMC,MAAM,4BAAGD,QAAQ,CAClBE,OADU,CAEVC,GAFU,CAEN,cAFM,CAAH,0DAAG,sBAGTC,QAHS,CAGA,kBAHA,CAAf;AAIA,YAAMC,IAAI,GAAGJ,MAAM,KAAI,MAAMD,QAAQ,CAACM,IAAT,EAAV,CAAnB,CAL+I,CAO/I;;AACA,UAAI,CAACN,QAAQ,CAACO,EAAd,EAAkB;AACd;AACA,cAAMhB,KAAK,GAAIc,IAAI,IAAIA,IAAI,CAACG,OAAd,IAA0BR,QAAQ,CAACS,MAAjD;AACA,eAAOC,OAAO,CAACC,MAAR,CAAepB,KAAf,CAAP;AACH;;AACDK,MAAAA,OAAO,CAACC,GAAR,CAAYQ,IAAZ;AACAf,MAAAA,WAAW,CAACe,IAAI,CAACO,IAAN,CAAX;AACH,KAfP,EAeSC,KAfT,CAeetB,KAAK,IAAI;AACdC,MAAAA,QAAQ,CAACD,KAAK,CAACuB,QAAN,EAAD,CAAR;AACAlB,MAAAA,OAAO,CAACL,KAAR,CAAc,qBAAd,EAAqCA,KAArC;AACH,KAlBP;AAmBD,GApBU,EAoBR,EApBQ,CAAT,CATa,CA8BX;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIF,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,cACIF,QAAQ,IAAIA,QAAQ,CAAC0B,GAAT,CAAa,CAACC,IAAD,EAAaC,KAAb,KAAuB;AAChD,0BACE;AAAA,+BACA;AAAA,0BAAO,WAAUD,IAAI,CAACE,MAAO,EAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AADA,uBADF;AAKC,KANW;AADhB;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;GAjEQlC,G;;KAAAA,G;AAmET,eAAeA,GAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport Moment from 'moment';\nfunction App() {\nconst [lat, setlatitude] = useState(null);\nconst [long, setlongitude] = useState(null);\nconst [userdata,\n  setUserdata] = useState([]);\nconst [error,\n  setError] = useState(null)\nconst timessstamp = Moment().subtract(5,'d').unix();\nconsole.log(timessstamp, 'gggiii'); \n  useEffect(() => {\n  fetch('http://api.openweathermap.org/data/2.5/forecast?q=London&mode=json&units=imperial&appid=73748f7d2e1692455877e78259d5e3d5').then(async response => {\n            const isJson = response\n                .headers\n                .get('content-type')\n                ?.includes('application/json');\n            const data = isJson && await response.json();\n\n            // check for error response\n            if (!response.ok) {\n                // get error message from body or default to response status\n                const error = (data && data.message) || response.status;\n                return Promise.reject(error);\n            }\n            console.log(data);\n            setUserdata(data.list);\n        }).catch(error => {\n            setError(error.toString());\n            console.error('There was an error!', error);\n        });\n}, [])\n    //   if(lat !== null && long !==null) {\n    //     fetch('http://api.openweathermap.org/data/2.5/onecall/timemachine?lat='+lat+'&lon='+long+'&dt='+timessstamp+'&appid=73748f7d2e1692455877e78259d5e3d5').then(async response => {\n    //       const isJson = response\n    //           .headers\n    //           .get('content-type')\n    //           ?.includes('application/json');\n    //       const data = isJson && await response.json();\n\n    //       // check for error response\n    //       if (!response.ok) {\n    //           // get error message from body or default to response status\n    //           const error = (data && data.message) || response.status;\n    //           return Promise.reject(error);\n    //       }\n    //       console.log(data);\n    //       // setUserdata(data);\n    //   }).catch(error => {\n    //       setError(error.toString());\n    //       console.error('There was an error!', error);\n    //   });\n    // }\n \n\n\n  return (\n    <div className=\"App\">\n       {userdata && userdata.map((note : any, index) => {\n        return(\n          <>\n          <h1> {` Date : ${note.dt_txt}`}</h1>\n          </>\n          )\n        })}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}