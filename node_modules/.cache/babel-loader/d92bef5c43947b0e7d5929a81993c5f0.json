{"ast":null,"code":"var _jsxFileName = \"/home/rohitv/my-app/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [lat, setlatitude] = useState(null);\n  const [long, setlongitude] = useState(null);\n  const [error, setError] = useState(null);\n  const timestamp = Date.now();\n  fetch('http://api.openweathermap.org/geo/1.0/direct?q=London&limit=5&appid=2a6ed6669671100313d8ccd388e8784e').then(async response => {\n    var _response$headers$get;\n\n    const isJson = (_response$headers$get = response.headers.get('content-type')) === null || _response$headers$get === void 0 ? void 0 : _response$headers$get.includes('application/json');\n    const data = isJson && (await response.json()); // check for error response\n\n    if (!response.ok) {\n      // get error message from body or default to response status\n      const error = data && data.message || response.status;\n      return Promise.reject(error);\n    }\n\n    console.log(data);\n    setlatitude(data[0].lat);\n    setlongitude(data[0].lon);\n  }).catch(error => {\n    setError(error.toString());\n    console.error('There was an error!', error);\n  });\n  fetch('http://api.openweathermap.org/data/2.5/onecall/timemachine?lat=' + lat + '&lon=' + long + '&dt=' + timestamp + '&appid=2a6ed6669671100313d8ccd388e8784e').then(async response => {\n    var _response$headers$get2;\n\n    const isJson = (_response$headers$get2 = response.headers.get('content-type')) === null || _response$headers$get2 === void 0 ? void 0 : _response$headers$get2.includes('application/json');\n    const data = isJson && (await response.json()); // check for error response\n\n    if (!response.ok) {\n      // get error message from body or default to response status\n      const error = data && data.message || response.status;\n      return Promise.reject(error);\n    }\n\n    console.log(data, 'something');\n  }).catch(error => {\n    setError(error.toString());\n    console.error('There was an error!', error);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"y/iNALFaEfhnwfYQr21b5k0HsRU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/rohitv/my-app/src/App.tsx"],"names":["React","useState","App","lat","setlatitude","long","setlongitude","error","setError","timestamp","Date","now","fetch","then","response","isJson","headers","get","includes","data","json","ok","message","status","Promise","reject","console","log","lon","catch","toString"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAO,WAAP;;;AACA,SAASC,GAAT,GAAe;AAAA;;AACf,QAAM,CAACC,GAAD,EAAMC,WAAN,IAAqBH,QAAQ,CAAC,IAAD,CAAnC;AACA,QAAM,CAACI,IAAD,EAAOC,YAAP,IAAuBL,QAAQ,CAAC,IAAD,CAArC;AACA,QAAM,CAACM,KAAD,EACJC,QADI,IACQP,QAAQ,CAAC,IAAD,CADtB;AAEA,QAAMQ,SAAS,GAAGC,IAAI,CAACC,GAAL,EAAlB;AACEC,EAAAA,KAAK,CAAC,sGAAD,CAAL,CAA8GC,IAA9G,CAAmH,MAAMC,QAAN,IAAkB;AAAA;;AAC3H,UAAMC,MAAM,4BAAGD,QAAQ,CAClBE,OADU,CAEVC,GAFU,CAEN,cAFM,CAAH,0DAAG,sBAGTC,QAHS,CAGA,kBAHA,CAAf;AAIA,UAAMC,IAAI,GAAGJ,MAAM,KAAI,MAAMD,QAAQ,CAACM,IAAT,EAAV,CAAnB,CAL2H,CAO3H;;AACA,QAAI,CAACN,QAAQ,CAACO,EAAd,EAAkB;AACd;AACA,YAAMd,KAAK,GAAIY,IAAI,IAAIA,IAAI,CAACG,OAAd,IAA0BR,QAAQ,CAACS,MAAjD;AACA,aAAOC,OAAO,CAACC,MAAR,CAAelB,KAAf,CAAP;AACH;;AACDmB,IAAAA,OAAO,CAACC,GAAR,CAAYR,IAAZ;AACAf,IAAAA,WAAW,CAACe,IAAI,CAAC,CAAD,CAAJ,CAAQhB,GAAT,CAAX;AACAG,IAAAA,YAAY,CAACa,IAAI,CAAC,CAAD,CAAJ,CAAQS,GAAT,CAAZ;AACH,GAhBP,EAgBSC,KAhBT,CAgBetB,KAAK,IAAI;AACdC,IAAAA,QAAQ,CAACD,KAAK,CAACuB,QAAN,EAAD,CAAR;AACAJ,IAAAA,OAAO,CAACnB,KAAR,CAAc,qBAAd,EAAqCA,KAArC;AACH,GAnBP;AAqBMK,EAAAA,KAAK,CAAC,oEAAkET,GAAlE,GAAsE,OAAtE,GAA8EE,IAA9E,GAAmF,MAAnF,GAA0FI,SAA1F,GAAoG,yCAArG,CAAL,CAAqJI,IAArJ,CAA0J,MAAMC,QAAN,IAAkB;AAAA;;AAC1K,UAAMC,MAAM,6BAAGD,QAAQ,CAClBE,OADU,CAEVC,GAFU,CAEN,cAFM,CAAH,2DAAG,uBAGTC,QAHS,CAGA,kBAHA,CAAf;AAIA,UAAMC,IAAI,GAAGJ,MAAM,KAAI,MAAMD,QAAQ,CAACM,IAAT,EAAV,CAAnB,CAL0K,CAO1K;;AACA,QAAI,CAACN,QAAQ,CAACO,EAAd,EAAkB;AACd;AACA,YAAMd,KAAK,GAAIY,IAAI,IAAIA,IAAI,CAACG,OAAd,IAA0BR,QAAQ,CAACS,MAAjD;AACA,aAAOC,OAAO,CAACC,MAAR,CAAelB,KAAf,CAAP;AACH;;AACDmB,IAAAA,OAAO,CAACC,GAAR,CAAYR,IAAZ,EAAkB,WAAlB;AACH,GAdC,EAcCU,KAdD,CAcOtB,KAAK,IAAI;AACdC,IAAAA,QAAQ,CAACD,KAAK,CAACuB,QAAN,EAAD,CAAR;AACAJ,IAAAA,OAAO,CAACnB,KAAR,CAAc,qBAAd,EAAqCA,KAArC;AACH,GAjBC;AAqBN,sBACE;AAAK,IAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GArDQL,G;;KAAAA,G;AAuDT,eAAeA,GAAf","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\nfunction App() {\nconst [lat, setlatitude] = useState(null);\nconst [long, setlongitude] = useState(null);\nconst [error,\n  setError] = useState(null)\nconst timestamp = Date.now()\n  fetch('http://api.openweathermap.org/geo/1.0/direct?q=London&limit=5&appid=2a6ed6669671100313d8ccd388e8784e').then(async response => {\n            const isJson = response\n                .headers\n                .get('content-type')\n                ?.includes('application/json');\n            const data = isJson && await response.json();\n\n            // check for error response\n            if (!response.ok) {\n                // get error message from body or default to response status\n                const error = (data && data.message) || response.status;\n                return Promise.reject(error);\n            }\n            console.log(data);\n            setlatitude(data[0].lat);\n            setlongitude(data[0].lon);\n        }).catch(error => {\n            setError(error.toString());\n            console.error('There was an error!', error);\n        });\n\n        fetch('http://api.openweathermap.org/data/2.5/onecall/timemachine?lat='+lat+'&lon='+long+'&dt='+timestamp+'&appid=2a6ed6669671100313d8ccd388e8784e').then(async response => {\n          const isJson = response\n              .headers\n              .get('content-type')\n              ?.includes('application/json');\n          const data = isJson && await response.json();\n\n          // check for error response\n          if (!response.ok) {\n              // get error message from body or default to response status\n              const error = (data && data.message) || response.status;\n              return Promise.reject(error);\n          }\n          console.log(data, 'something');\n      }).catch(error => {\n          setError(error.toString());\n          console.error('There was an error!', error);\n      });\n \n\n\n  return (\n    <div className=\"App\">\n      {}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}