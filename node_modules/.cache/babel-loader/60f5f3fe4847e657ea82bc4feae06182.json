{"ast":null,"code":"var _jsxFileName = \"/home/rohitv/my-app/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport Moment from 'moment';\nimport Test from './components/test';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App(props) {\n  _s();\n\n  const [lat, setlatitude] = useState(null);\n  const [long, setlongitude] = useState(null);\n  const [city, setcity] = useState('');\n  const [userdata, setUserdata] = useState([]);\n  const [error, setError] = useState(null);\n  const timessstamp = Moment().subtract(5, 'd').unix();\n  console.log(props, 'gggiii');\n\n  const handleSubmit = key => {\n    history.push({\n      pathname: '/test?city=' + key,\n      state: key\n    });\n  };\n  /*const handleSubmit = (key:any) => {\n    const value=queryString.parse(props.location.search);\n    console.log(value);\n    fetch('http://api.openweathermap.org/data/2.5/forecast?q='+token+'&mode=json&units=imperial&appid=73748f7d2e1692455877e78259d5e3d5').then(async response => {\n              const isJson = response\n                  .headers\n                  .get('content-type')\n                  ?.includes('application/json');\n              const data = isJson && await response.json();\n  \n              // check for error response\n              if (!response.ok) {\n                  // get error message from body or default to response status\n                  const error = (data && data.message) || response.status;\n                  return Promise.reject(error);\n              }\n              console.log(data);\n              setUserdata(data.list);\n          }).catch(error => {\n              setError(error.toString());\n              console.error('There was an error!', error);\n          });\n  };*/\n  //   if(lat !== null && long !==null) {\n  //     fetch('http://api.openweathermap.org/data/2.5/onecall/timemachine?lat='+lat+'&lon='+long+'&dt='+timessstamp+'&appid=73748f7d2e1692455877e78259d5e3d5').then(async response => {\n  //       const isJson = response\n  //           .headers\n  //           .get('content-type')\n  //           ?.includes('application/json');\n  //       const data = isJson && await response.json();\n  //       // check for error response\n  //       if (!response.ok) {\n  //           // get error message from body or default to response status\n  //           const error = (data && data.message) || response.status;\n  //           return Promise.reject(error);\n  //       }\n  //       console.log(data);\n  //       // setUserdata(data);\n  //   }).catch(error => {\n  //       setError(error.toString());\n  //       console.error('There was an error!', error);\n  //   });\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"step1submit\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"city\",\n        type: \"text\",\n        value: city,\n        onChange: e => setcity(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => viewestimatesubmit(city),\n        className: \"btn btn-blue\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Test, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), userdata && userdata.map((note, index) => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\" \", ` Date : ${note.dt_txt}`]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), `Wheather : ${note.weather[0].description}`, \",\", `humidity : ${note.main.humidity}`]\n      }, void 0, true);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"jc3MDekMeb3grOR5ydZH/xU6khQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/rohitv/my-app/src/App.tsx"],"names":["React","useState","Moment","Test","App","props","lat","setlatitude","long","setlongitude","city","setcity","userdata","setUserdata","error","setError","timessstamp","subtract","unix","console","log","handleSubmit","key","history","push","pathname","state","e","target","value","viewestimatesubmit","map","note","index","dt_txt","weather","description","main","humidity"],"mappings":";;;AAAA,OAAOA,KAAP,IAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAO,WAAP;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;;;;AAEA,SAASC,GAAT,CAAaC,KAAb,EAAwB;AAAA;;AACxB,QAAM,CAACC,GAAD,EAAMC,WAAN,IAAqBN,QAAQ,CAAC,IAAD,CAAnC;AACA,QAAM,CAACO,IAAD,EAAOC,YAAP,IAAuBR,QAAQ,CAAC,IAAD,CAArC;AACA,QAAM,CAACS,IAAD,EACJC,OADI,IACOV,QAAQ,CAAC,EAAD,CADrB;AAEE,QAAM,CAACW,QAAD,EACJC,WADI,IACWZ,QAAQ,CAAC,EAAD,CADzB;AAEF,QAAM,CAACa,KAAD,EACJC,QADI,IACQd,QAAQ,CAAC,IAAD,CADtB;AAEA,QAAMe,WAAW,GAAGd,MAAM,GAAGe,QAAT,CAAkB,CAAlB,EAAoB,GAApB,EAAyBC,IAAzB,EAApB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYf,KAAZ,EAAmB,QAAnB;;AACA,QAAMgB,YAAY,GAAIC,GAAD,IAAS;AAE5BC,IAAAA,OAAO,CAACC,IAAR,CAAa;AAACC,MAAAA,QAAQ,EAAE,gBAAcH,GAAzB;AAA8BI,MAAAA,KAAK,EAAEJ;AAArC,KAAb;AAED,GAJD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAIF,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAM,MAAA,SAAS,EAAC,aAAhB;AAA8B,MAAA,QAAQ,EAAED,YAAxC;AAAA,8BAEkB;AACI,QAAA,IAAI,EAAC,MADT;AAEI,QAAA,IAAI,EAAC,MAFT;AAGI,QAAA,KAAK,EAAEX,IAHX;AAII,QAAA,QAAQ,EAAEiB,CAAC,IAAIhB,OAAO,CAACgB,CAAC,CAACC,MAAF,CAASC,KAAV,CAJ1B;AAKI,QAAA,QAAQ;AALZ;AAAA;AAAA;AAAA;AAAA,cAFlB,eAQG;AAAS,QAAA,OAAO,EAAE,MAAMC,kBAAkB,CAACpB,IAAD,CAA1C;AAAkD,QAAA,SAAS,EAAC,cAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARH;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAYE,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,YAZF,EAaIE,QAAQ,IAAIA,QAAQ,CAACmB,GAAT,CAAa,CAACC,IAAD,EAAaC,KAAb,KAAuB;AAEhD,0BACE;AAAA,gCAEA;AAAA,0BAAO,WAAUD,IAAI,CAACE,MAAO,EAA7B;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFA,EAGE,cAAaF,IAAI,CAACG,OAAL,CAAa,CAAb,EAAgBC,WAAY,EAH3C,OAIE,cAAaJ,IAAI,CAACK,IAAL,CAAUC,QAAS,EAJlC;AAAA,sBADF;AAQC,KAVW,CAbhB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA2BD;;GA1FQlC,G;;KAAAA,G;AA4FT,eAAeA,GAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport Moment from 'moment';\nimport Test from './components/test'\nimport queryString from 'query-string'\nfunction App(props:any) {\nconst [lat, setlatitude] = useState(null);\nconst [long, setlongitude] = useState(null);\nconst [city,\n  setcity] = useState('');\n  const [userdata,\n    setUserdata] = useState([]);\nconst [error,\n  setError] = useState(null)\nconst timessstamp = Moment().subtract(5,'d').unix();\nconsole.log(props, 'gggiii'); \nconst handleSubmit = (key) => {\n\n  history.push({pathname: '/test?city='+key, state: key});\n\n};\n/*const handleSubmit = (key:any) => {\n  const value=queryString.parse(props.location.search);\n  console.log(value);\n  fetch('http://api.openweathermap.org/data/2.5/forecast?q='+token+'&mode=json&units=imperial&appid=73748f7d2e1692455877e78259d5e3d5').then(async response => {\n            const isJson = response\n                .headers\n                .get('content-type')\n                ?.includes('application/json');\n            const data = isJson && await response.json();\n\n            // check for error response\n            if (!response.ok) {\n                // get error message from body or default to response status\n                const error = (data && data.message) || response.status;\n                return Promise.reject(error);\n            }\n            console.log(data);\n            setUserdata(data.list);\n        }).catch(error => {\n            setError(error.toString());\n            console.error('There was an error!', error);\n        });\n};*/\n    //   if(lat !== null && long !==null) {\n    //     fetch('http://api.openweathermap.org/data/2.5/onecall/timemachine?lat='+lat+'&lon='+long+'&dt='+timessstamp+'&appid=73748f7d2e1692455877e78259d5e3d5').then(async response => {\n    //       const isJson = response\n    //           .headers\n    //           .get('content-type')\n    //           ?.includes('application/json');\n    //       const data = isJson && await response.json();\n\n    //       // check for error response\n    //       if (!response.ok) {\n    //           // get error message from body or default to response status\n    //           const error = (data && data.message) || response.status;\n    //           return Promise.reject(error);\n    //       }\n    //       console.log(data);\n    //       // setUserdata(data);\n    //   }).catch(error => {\n    //       setError(error.toString());\n    //       console.error('There was an error!', error);\n    //   });\n    // }\n \n\n\n  return (\n    <div className=\"App\">\n      <form className=\"step1submit\" onSubmit={handleSubmit}>\n\n                        <input\n                            name=\"city\"\n                            type=\"text\"\n                            value={city}\n                            onChange={e => setcity(e.target.value)}\n                            required/>\n         <button  onClick={() => viewestimatesubmit(city)} className=\"btn btn-blue\">Send</button>\n      </form>\n\n      <Test />\n       {userdata && userdata.map((note : any, index) => {\n  \n        return(\n          <>\n\n          <h1> {` Date : ${note.dt_txt}`}</h1>\n          {`Wheather : ${note.weather[0].description}`},\n          {`humidity : ${note.main.humidity}`}\n          </>\n          )\n        })}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}