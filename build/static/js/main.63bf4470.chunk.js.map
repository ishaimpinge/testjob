{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","props","useState","city","setcity","Locationname","setLocationname","userdata","setUserdata","error","setError","value","window","location","search","split","handleSubmit","event","useEffect","fetch","then","response","a","isJson","headers","get","includes","json","data","ok","message","status","Promise","reject","console","log","list","name","catch","toString","setTimeout","className","style","color","background","padding","onSubmit","type","onChange","e","target","required","map","note","index","dt_txt","main","temp","weather","description","humidity","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPAkGeA,MAhGf,SAAaC,GACT,MACeC,mBAAS,IADxB,mBAAOC,EAAP,KACIC,EADJ,KAEA,EACuBF,mBAAS,IADhC,mBAAOG,EAAP,KACIC,EADJ,KAEA,EACmBJ,mBAAS,IAD5B,mBAAOK,EAAP,KACIC,EADJ,KAEA,EACgBN,mBAAS,MADzB,mBAAOO,EAAP,KACIC,EADJ,KAEUC,EAAMC,OAAOC,SAASC,OAAOC,MAAM,UAEvCC,EAAe,SAACC,KA6BtB,OA3BAC,qBAAU,WAENC,MAAM,qDAAuDR,EAAM,GAAK,oEAAoES,KAA5I,uCAAiJ,WAAMC,GAAN,qBAAAC,EAAA,yDACvIC,EADuI,UAC9HF,EACVG,QACAC,IAAI,uBAHoI,aAC9H,EAGTC,SAAS,oBAJ8H,KAKhIH,GALgI,qCAKhHF,EAASM,OALuG,6BAKvIC,EALuI,KAQxIP,EAASQ,GAR+H,wBAUnIpB,EAASmB,GAAQA,EAAKE,SAAYT,EAASU,OAVwF,kBAWlIC,QAAQC,OAAOxB,IAXmH,QAa7IyB,QAAQC,IAAIP,GACZpB,EAAYoB,EAAKQ,MACjB9B,EAAgBsB,EAAKzB,KAAKkC,MAfmH,4CAAjJ,uDAgBGC,OAAM,SAAA7B,GACLC,EAASD,EAAM8B,YACfC,YAAW,WACP9B,EAAS,QACV,KACHwB,QAAQzB,MAAM,sBAAuBA,QAExC,CAACE,EAAM,KAIR,sBAAK8B,UAAU,MAAf,UACKhC,EACK,sBACMgC,UAAU,QACVC,MAAO,CACPC,MAAO,QACPC,WAAY,MACZC,QAAS,QALf,UAOM,mBAAGJ,UAAU,8BACZhC,KAEP,KAEN,uBAAMgC,UAAU,cAAcK,SAAU9B,EAAxC,UACQ,0DACJ,uBACIqB,KAAK,OACLU,KAAK,OACLpC,MAAOR,EACP6C,SAAU,SAAAC,GAAC,OAAI7C,EAAQ6C,EAAEC,OAAOvC,QAChCwC,UAAQ,IACZ,wBAAQH,SAAUhC,EAAcyB,UAAU,eAA1C,qBAEJ,wCACSpC,KACRE,GAAYA,EAAS6C,KAAI,SAACC,EAAYC,GAEnC,OAAS,yCAAG,sBACRb,UAAU,WACVC,MAAO,CACP,OAAU,iBACV,MAAS,OACT,MAAS,OALD,UAOR,+CACgBW,EAAKE,UACjB,8CAAeF,EAAKG,KAAKC,QATrB,qBAUOJ,EAAKK,QAAQ,GAAGC,aAVvB,0BAUsDN,EAAKG,KAAKI,UACxE,oBAAIlB,MAAO,CACP,MAAS,OADb,SAE6B,SAAzBW,EAAKK,QAAQ,GAAGF,KACV,+BACyB,WAAzBH,EAAKK,QAAQ,GAAGF,KAChB,6BACA,eAjBL,cC1DVK,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB3C,MAAK,YAAkD,IAA/C4C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.63bf4470.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './App.css';\nfunction App(props:any) {\n    const [city,\n        setcity] = useState('');\n    const [Locationname,\n        setLocationname] = useState('');\n    const [userdata,\n        setUserdata] = useState([]);\n    const [error,\n        setError] = useState(null)\n        const value=window.location.search.split('?city=');\n       \n    const handleSubmit = (event : any) => {\n    }\n    useEffect(()=>{\n        // event.preventDefault();\n        fetch('http://api.openweathermap.org/data/2.5/forecast?q=' + value[1] + '&mode=json&units=imperial&appid=2a6ed6669671100313d8ccd388e8784e').then(async response => {\n            const isJson = response\n                .headers\n                .get('content-type')\n                ?.includes('application/json');\n            const data = isJson && await response.json();\n\n            // check for error response\n            if (!response.ok) {\n                // get error message from body or default to response status\n                const error = (data && data.message) || response.status;\n                return Promise.reject(error);\n            }\n            console.log(data);\n            setUserdata(data.list);\n            setLocationname(data.city.name);\n        }).catch(error => {\n            setError(error.toString());\n            setTimeout(() => {\n                setError(null);\n            }, 3000);\n            console.error('There was an error!', error);\n        });\n      }, [value[1]])\n\n    return (\n\n        <div className=\"App\">\n            {error\n                ? <div\n                        className=\"error\"\n                        style={{\n                        color: 'white',\n                        background: 'red',\n                        padding: '10px'\n                    }}>\n                        <i className=\"material-icons error-icon\"></i>\n                        {error}\n                    </div>\n                : null}\n\n            <form className=\"step1submit\" onSubmit={handleSubmit}>\n                    <label>Please enter the city</label>\n                <input\n                    name=\"city\"\n                    type=\"text\"\n                    value={city}\n                    onChange={e => setcity(e.target.value)}\n                    required/>\n                <button onChange={handleSubmit} className=\"btn btn-blue\">Send</button>\n            </form>\n            <h1>\n                {` ${Locationname}`}</h1>\n            {userdata && userdata.map((note : any, index) => {\n\n                return ( <> <div\n                    className=\"contdata\"\n                    style={{\n                    'border': '1px solid #ccc',\n                    'float': 'left',\n                    'width': '23%'\n                }}>\n                    <h4>\n                        {` Date : ${note.dt_txt}`}</h4>\n                        <h3>{`Temp : ${note.main.temp}`}</h3>\n                    {`Wheather : ${note.weather[0].description}`}, {`humidity : ${note.main.humidity}`}\n                    <h4 style={{\n                        'color': 'red'\n                    }}>{note.weather[0].main === 'Rain'\n                            ? 'Best day to sell an umbrella'\n                            : note.weather[0].main === 'Clouds'\n                            ? 'Best day to sell an jacket'\n                            : 'No Sell'}\n                            </h4>\n                </div> </>\n          )\n        })}\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}